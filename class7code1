int solveUsingRecursion(vector<int>& arr, int curr, int prev) {
        if(curr >= arr.size()) {
            return 0;
        }

        //include
        int include = 0;
        if(prev == -1 || arr[curr] > arr[prev])
            include = 1 + solveUsingRecursion(arr, curr+1, curr);

        //excude
        int exclude = 0 + solveUsingRecursion(arr, curr+1, prev);

        int ans = max(include, exclude);
        return ans;

    }


    int lengthOfLIS(vector<int>& nums) {
        
        int curr = 0;
        int prev = -1;
        // int ans = solveUsingRecursion(nums, curr, prev );
        int n = nums.size();
        //vector<vector<int> > dp(n, vector<int>(n+1, -1));
        //int ans = solveUsingMem(nums, curr, prev, dp);
        int ans = solveOptimal(nums);
        return ans;
        
    }