int solveUsingRecursion(string& a, string& b, int i, int j) {

        //base case
        if( i == a.length()) {
            return b.length()-j;
        }

        if(j == b.length()) {
            return a.length()-i;
        }

        int ans = 0;
        if(a[i] == b[j]) {
            ans = solveUsingRecursion(a,b,i+1,j+1);
        }
        else {
            //operation perform karo 
            int insert = 1 + solveUsingRecursion(a,b,i,j+1);
            int deleted = 1 + solveUsingRecursion(a,b,i+1,j);
            int replace = 1 + solveUsingRecursion(a,b,i+1, j+1);
            ans = min(insert, min(deleted, replace));
        }
        return ans;
    }


    int minDistance(string word1, string word2) {
        if(word1.length() == 0) 
            return word2.length();
        
        if(word2.length() == 0)
            return word1.length();
        int i = 0;
        int j = 0;


        //vector<vector<int> > dp(word1.length(), vector<int>(word2.length(), -1));

        //return solveUsingMem(word1, word2, i, j, dp);
        return solveUsingTabSO(word1, word2);
    }